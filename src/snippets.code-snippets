{
  "im": {
    "prefix": "im",
    "body": ["import '${1:packageName}'"],
    "description": "import packageName"
  },
  "imp": {
    "prefix": "imp",
    "body": ["import ${2:name} from '${1:packageName}'"],
    "description": "import name from packageName"
  },
  "imd": {
    "prefix": "imd",
    "body": ["import { ${2:name} } from '${1:packageName}'"],
    "description": "import { name } from packageName"
  },
  "ime": {
    "prefix": "ime",
    "body": ["import * as ${2:name} from '${1:packageName}'"],
    "description": "import * as name from packageName"
  },
  "ima": {
    "prefix": "ima",
    "body": ["import { ${2:name} as ${3:otherName}} from '${1:packageName}'"],
    "description": "import { name as otherName } from packageName"
  },
  "exp": {
    "prefix": "exp",
    "body": ["export default ${1:packageName}"],
    "description": "export default packageName"
  },
  "exd": {
    "prefix": "exd",
    "body": ["export { ${2:name} } from '${1:packageName}'"],
    "description": "export xx from xx"
  },
  "exa": {
    "prefix": "exa",
    "body": ["export { ${2:name} as ${3:otherName}} from '${1:packageName}'"],
    "description": "export { xx as xx } from xx"
  },
  "dob": {
    "prefix": "dob",
    "body": ["const { ${2:name} } = ${1: objectName}"],
    "description": "const { xx } = xx"
  },
  "dar": {
    "prefix": "dar",
    "body": ["const [ ${2:name} ] = ${1:arrayName}"],
    "description": "const [ xx ] = xx"
  },
  "cfu": {
    "prefix": "cfu",
    "body": ["const ${1:functionName} = (${2:args}) => {$3}"],
    "description": "函数表达式"
  },
  "consoleLog": {
    "prefix": "clg",
    "body": ["console.log('${1:label}: ', ${2:variableName})"],
    "description": "console.log"
  },
  "consoleError": {
    "prefix": "cer",
    "body": ["console.error('${1:label}: ', ${2:variableName})"],
    "description": "console.error"
  },
  "useeffect": {
    "prefix": "useeffect",
    "body": ["useEffect(() => {${1}}, [])"],
    "description": "useEffect"
  },
  "useState": {
    "prefix": "usestate",
    "body": ["const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState(${2})"],
    "description": "useState"
  },
  "useref": {
    "prefix": "useref",
    "body": ["const ${1:ref} = useRef(${2})"],
    "description": "useRef"
  },
  "usecallback": {
    "prefix": "usecallback",
    "body": ["const ${1:functionName} = useCallback(() => {${2}}, [])"],
    "description": "useCallback"
  },
  "rf": {
    "prefix": "rf",
    "body": [
      "import React from 'react'",
      "",
      "const ${1/(.*)/${1:/capitalize}/} = props => {",
      "  return <div>hello world<div>",
      "}",
      "",
      "export default ${1/(.*)/${1:/capitalize}/}",
      ""
    ],
    "description": "函数组件"
  },
  "rfi": {
    "prefix": "rfi",
    "body": [
      "import React, { FC } from 'react'",
      "",
      "interface IProps {}",
      "",
      "const ${1/(.*)/${1:/capitalize}/}: FC<IProps> = props => {",
      "  return <div>hello world<div>",
      "}",
      "",
      "export default ${1/(.*)/${1:/capitalize}/}",
      ""
    ],
    "description": "TS函数组件"
  },
  "rff": {
    "prefix": "rff",
    "body": [
      "import React, { forwardRef, useImperativeHandle } from 'react'",
      "",
      "export interface I${1/(.*)/${1:/capitalize}/}Ref {}",
      "",
      "interface IProps {}",
      "",
      "const ${1/(.*)/${1:/capitalize}/}: React.ForwardRefRenderFunction<I${1/(.*)/${1:/capitalize}/}Ref, IProps> = (",
      "  props,",
      "  ref,",
      ") => {",
      "  useImperativeHandle(ref, () => ({})",
      "",
      "  return <div>hello world</div>",
      "}",
      "",
      "export default forwardRef(${1/(.*)/${1:/capitalize}/})",
      ""
    ],
    "description": "对外函数组件"
  },
  "formSearch": {
    "prefix": "formsearch",
    "body": [
      "<Form form={form}>",
      "  <SearchFormLayout.Row>",
      "    <SearchFormLayout.Col>",
      "      <Form.Item label=\"${1:label}\" name=\"${1:name}\">",
      "        <Input />",
      "      </Form.Item>",
      "    </SearchFormLayout.Col>",
      "    <SearchFormLayout.Col>",
      "      <Form.Item>",
      "        <SearchFormLayout.Space>",
      "          <Button type=\"primary\">搜索</Button>",
      "          <Button type=\"default\">重置</Button>",
      "        </SearchFormLayout.Space>",
      "      </Form.Item>",
      "    </SearchFormLayout.Col>",
      "  </SearchFormLayout.Row>",
      "</Form>"
    ],
    "description": "搜索表单"
  },
  "formAsync": {
    "prefix": "formasync",
    "body": [
      "<Form.Item label=\"${1:label}\" name=\"${2:name}\">",
      "  <AsyncSelect",
      "    remote={{",
      "      gqlKey: '${3}',",
      "      gql: ${3/(.*)/${3:/capitalize}/}Document,",
      "    }}",
      "  />",
      "</Form.Item>"
    ],
    "description": "异步选择表单"
  },
  "单行表单": {
    "prefix": "forminput",
    "body": [
      "<Form.Item label=\"${1:label}\" name=\"${2:name}\">",
      "  <Input />",
      "</Form.Item>"
    ],
    "description": "单行表单"
  },
  "多行表单": {
    "prefix": "formtext",
    "body": [
      "<Form.Item label=\"${1:label}\" name='${2:name}'>",
      "  <Input.TextArea />",
      "</Form.Item>"
    ],
    "description": "多行表单"
  },
  "选择表单": {
    "prefix": "formselect",
    "body": [
      "<Form.Item label=\"${1:label}\" name=\"${2:name}\">",
      "  <Select options={[]} />",
      "</Form.Item>"
    ],
    "description": "选择表单"
  },
  "复选表单": {
    "prefix": "formcheck",
    "body": [
      "<Form.Item label=\"${1:label}\" name=\"${2:name}\" valuePropName=\"checked\">",
      "  <Checkbox>${3:content}</Checkbox>",
      "</Form.Item>"
    ],
    "description": "复选表单"
  },
  "按钮表单": {
    "prefix": "formbutton",
    "body": [
      "<Form.Item>",
      "  <Button type=\"primary\" htmlType=\"submit\" onClick={() => ({})}>",
      "    ${1:submit}",
      "  </Button>",
      "  <Button htmlType=\"button\" onClick={() => ({})}>",
      "    ${2:reset}",
      "  </Button>",
      "</Form.Item>"
    ],
    "description": "按钮表单"
  },
  "数字表单": {
    "prefix": "formnumber",
    "body": [
      "<Form.Item label='${1:label}' name=\"${2:name}\">",
      "  <InputNumber />",
      "</Form.Item>"
    ],
    "description": "数字表单"
  },
  "开关表单": {
    "prefix": "formswitch",
    "body": [
      "<Form.Item label=\"${1:label}\" name='${2:name}' valuePropName=\"checked\">",
      "  <Switch />",
      "</Form.Item>"
    ],
    "description": "开关表单"
  },
  "单选表单": {
    "prefix": "formradio",
    "body": [
      "<Form.Item label=\"${1:label}\" name='${2:name}'>",
      "  <Radio.Group>",
      "    <Radio value=\"a\">item 1</Radio>",
      "    <Radio value=\"b\">item 2</Radio>",
      "  </Radio.Group>",
      "</Form.Item>"
    ],
    "description": "单选表单"
  },
  "日期表单": {
    "prefix": "formdate",
    "body": [
      "<Form.Item label=\"${1:label}\" name='${2:name}'>",
      "  <DatePicker />",
      "</Form.Item>"
    ],
    "description": "日期表单"
  },
  "日期范围表单": {
    "prefix": "formrange",
    "body": [
      "<Form.Item label=\"${1:label}\" name='${2:name}'>",
      "  <RangePicker />",
      "</Form.Item>"
    ],
    "description": "日期范围表单"
  },
  "表格配置": {
    "prefix": "columns",
    "body": [
      "const columns: ColumnsType<any> = [",
      "  { title: '${1:title}', dataIndex: '${2:name}' },",
      "  {",
      "    title: '操作',",
      "    dataIndex: 'action',",
      "    render: (_, row) => {",
      "      return (",
      "        <ActionText.Group>",
      "          <ActionText status=\"primary\" text=\"编辑\" to=\"/components\" />",
      "        </ActionText.Group>",
      "      )",
      "    },",
      "  },",
      "]"
    ],
    "description": "表格配置"
  },
  "创建 antd 表格数据请求": {
    "prefix": "usetable",
    "body": [
      "  const { tableProps, form, submit, reset, refresh } = useTablePagingGQL({",
      "    formatParams: values => {",
      "      const { page, ...val } = values",
      "      return {",
      "        input: {",
      "          ...val,",
      "          ...page,",
      "        },",
      "      }",
      "    },",
      "    gql: ${1/(.*)/${1:/capitalize}/}Document,",
      "    gqlKey: '${1}',",
      "  })"
    ],
    "description": "分页表格数据请求"
  },
  "useNav": {
    "prefix": "usenav",
    "body": ["const navigation = useNavigation()"],
    "description": "useNavigation"
  },
  "useRoute": {
    "prefix": "useroute",
    "body": ["const { params } = useRoute()"],
    "description": "useRoute"
  },
  "useMemo": {
    "prefix": "usememo",
    "body": ["const ${1:functionName} = useMemo(() => {${2}}, [])"],
    "description": "useMemo"
  }
}
